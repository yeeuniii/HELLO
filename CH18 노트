이벤트(event) : 발생하는 어떤 것
- 마우스가 움직이거나 클릭될 떄
- 키가 눌러졌을 때
- 특정 시간이 흘렀을 때

Terms.
# 이벤트 기반(event-driven) 프로그램
: 기본적으로 어떤 일, 즉 이벤트가 일어날 때를 기다리면서 아무 것도 하지 않고,
이벤트 발생 => 이벤트를 처리하는 데 필요한 행동

# 이벤트 루프(event loop)
: 이벤트 발생을 확인하기 위해 실행되는 특별한 반복
## 프로그램은 컴퓨터 메모리 내부에서 이벤트가 발생할 때마다 사용되는 신호를 지속적으로 조사, i.e, 지속적으로 메모리의 특정 부분 조사
## 그리고 프로그램이 실행되는 동안 이 작업을 반복.

# 이벤트 큐(event queue)
: 이벤트가 저장되는 메모리 영역
  발생하는 순서대로 이벤트가 저장되는 리스트
(term. 큐(queue) : 기다리는 줄, 특정 순서대로 들어와서 그 순서대로 사용되는 대상의 리스트)

# 이벤트 처리기(event handler)
: 특정 이벤트를 처리하는 부분


# 공 지우기
1. 스프라이트가 매번 움직일 때마다 기존의 위치에 배경색 새로 칠하는 것
2. 프레임마다 전체 배경을 새로 그려서 빈 화면에서 시작
    - Surface.fill()    # 예제 17.3
    - 표면을 만든 뒤, Surface.blit(newSurface, (0,0)) # 예제 18.1

pygame.event.get() # 이벤트 큐에서 모든 이베트의 리스트를 가져옴

키보드 이벤트
- KEYDOWN : 키가 언제 눌러지는지
# 키 반복(key repeat)
 : 반복이 시작하기까지 얼마나 대기하고, 얼마나 자주 반복할지를 밀리초(1/1000) 단위로 설정
    pygame.key.set_repeat(delay, interval)
                        # delay : 반복이 시작할 떄가지 얼마나 기다릴지
                        # interval : 키 반복이 얼마나 빨리 일어날지, i.e,
                                     KEYDOWN 이벤트 간의 간격이 얼마나 될지

마우스 이벤트
- MOUSEBUTTONUP     # 마우스 버튼을 뗌
- MOUSEBUTTONDOWN   # 마우스 버튼이 눌려짐
- MOUSEMOTION       # 마우스의 이동 검사

event.pos   # 마우스의 x, y 좌표 위치값

타이머 이벤트
## 타이머의 시간이 지나면, 이벤트 루프에서 확인이 가능한 이벤트를 발생시킴
## 이때 발생하는 이벤트 ==> 사용자 이벤트(user event)
                        : 미리 정의돼 있찌 않아 사용자가 원하는 목적으로 사용 가능

pygame.time.set_timer(EVENT_NUMBER, interval)
                      # 이벤트 번호   # 타이머가 이벤트를 발생한 간격(밀리초)
                      pygame.USEREVENT
                      pygame.NUMEVENTS

